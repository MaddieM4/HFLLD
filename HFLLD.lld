(( Heirarchically Formatted Layered Legal Document Specification and Reference ))

This is a plain text HFLLD, according to the schema defined within itself.

  (( HFLLD Document Schema and Formatting ))
  
  The schema of an HFLLD is pretty simple. It's composed of multiple pages, each 5000 characters or less, which
  are nested with arbitrary whitespace indentation (preferably 2 spaces).
  
    The compositor works by finding lines that contain {{ somefilename }} patterns. It takes whatever exists
    on the line before that, and uses it as a prefix for every line it includes from the named file.
    
    Characters are calculated by byte, so using fancy Unicode characters can burn through your quota of 5000 characters
    per page. It's not a terribly "smart" method, but also uncomplicated and decidedly non-arbitrary. Would you really
    rather do special handling for things like glyphs? No? I thought not. Sorry if that's an uncomfortably technical way
    to draw the line for lawyer people, but it IS the simpler solution.
    
    Character counts for a page are computed by adding up the number of bytes of every line that starts with a
    non-whitespace character. The newline is included in the count. However, a line that only consists of a newline
    character will not add to the count.
  
  Generally, for size sanity-checking and automatic layering and suchnot, you should be doing each page as a separate
  file, and splicing them together using a compositer like the simplistic one provided in the HFLLD repository.
  
    (( Using the Compositor ))
    
    The compositor that comes with the repository, hflld-compositor, is a pretty simplistic program that
    turns a set of subpages into a full, all-inclusive result. It's not too hard to use, either.
    
    To see the options, run "hflld-compositor -h" on the command line, excluding the quote marks, of course.
    This will print out what options are built in. Generally, you'll want to use the -i and -o options to
    specify input and output filenames. Use the -f option to "finalize" the file. That's usually what you
    want to do, unless you specifically want to use the output as a template.
    
    To see an example of this in action, look at the shell script, build.sh. This builds HFLLD.llt into its
    final .lld file, and in the future, create more output formats as well based on the .lld.
    
    For examples of how to make template files (.llt's), open this page (compositor.llt) in a text editor.
  
  A top-level page should say what formatting it and its descendants are - plain text, HTML, Markdown, LaTeX...
  You can also express this in the filename by layering extensions, such as MyLDD.txt.llt. The final extension
  should either be llt or lld... llt files are templates that represent a single page, and reference subpages,
  while lld files are finished products ready to either distribute/pass to other tools to make them
  interactive or whatever.
  
  To give a page a title, make its first line in the format of "(( My Title ))". Don't use the quote marks, just
  the parentheses, please. Tools that make stuff out of .lld files can then use those titles however they see fit.

Anyone can copy, modify and use this as they see fit. However, people should be advised to use caution with any
custom-brewed, modified versions of it. It's generally better to wait until such changes are merged into the
canonical branch moderated by the original author, Philip Horger.

  (( missing file: usage.llt ))

HFLLDs are intended to provide safety and security to all parties in an agreement, and works to guarantee certain
protections legally, such as providing the boilerplate for requiring signatures, and making any subpage that is used
to hide abusive, manipulative, or misleading legal "code" behind an agreaable face liable to legal invalidation. So
if somebody tries to use you, and you can point out that the legal jargon doesn't match the summary, you can take
that guy (or company) to court and win.

  (( missing file: protections.llt ))

Long term, it's hoped that the HFLLD as a concept will grow in popularity organically as a type of interpersonal
agreement, but eventually become a common format for government legislation all over the world (or at least, inspire
positive changes in the same directions for those arenas). It's also hoped that the contributions of legal- and
software-talented people will contribute to a robust and simple mainline version of the HFLLD spec.

For more information, see the core project's github page, at https://github.com/campadrenalin/HFLLD